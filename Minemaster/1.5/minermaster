--http://pastebin.com/Y40SreNs

local n=0
minerid=-1
continue = true
function connect() 
	rednet.open("back")
end
local minersOptions ={}
local options={
"Search for a miner",
"Manual Mode",
"Autominer Mode",
"Exit"
}

function CUI(m)
	n=1
	l=#m
	while true do	
		term.clear()
		term.setCursorPos(1,2)
		for i=1, l, 1 do
			if i==n then print(i, " ["..m[i].."]") else print(i, " ", m[i]) end
		end
		print("Select a number[arrow up/arrow down]".. "                  MinerId: "..minerid)
		a, b= os.pullEventRaw()
		if a == "key" then
			if b==200 and n>1 then n=n-1 end
			if b==208 and n<=l then n=n+1 end
			if b==28 then break end
		end
	end
	term.clear( term.setCursorPos(1,1))
	return n
end
local minerOptions= {}
miners = {}
function searchMiners()

	print("Searching miners...")
	local i = 1
	local j = 1
	while true do
	
		print("Sending key : minemaster")
		rednet.broadcast("minemaster")
		id, msg = rednet.receive(3)
		if msg == "slave" then
			miners[i]=id
			minersOptions[i]= "Miner id: " .. id
			minerid = id
			i = i+1
		end
		if j== 5 then
			break
		end
		j= j+1
		
	end
	
	local n = CUI(minersOptions)
	
	minerid = miners[n]
	print("Miner id: ".. id .." Selected")
	
	
end
function listen()
	local id = 0
	id,msg = rednet.receive()

	if id == minerid then
		term.clear()
		print(msg)
	end
end

function listenAlways()
	continue=true
	local id = 0
	while continue do
		id,msg = rednet.receive()

		if id == minerid then
		term.clear()
		print(msg)


		end	
	end
end

function listenForAutominer()
	cache=''
	continue=true
	while continue do
	
		--Send Request for the map

	
		--Receive Map
		-- Receive messages better throught os.pullEvent() so I can check for P button for Pause
		event, param1 ,param2 = os.pullEvent()
        if event == "char" and param1 == "p" or param1 =="P" then
			print("Please be patient, if the autominer was not in AUTO state, it may take a few seconds to pause")
			print("Press P again if nothing happens after 20 seconds...")
			while true do
				rednet.send(minerid,"autominer:pause")
				id,msg = rednet.receive(1)
				if id == minerid then
					if msg == "autominer:paused" then
						print("Minner Paused: What do you want to do now?")
						break
					end
				end
			end
		elseif event == "rednet_message" then
			if param1 == minerid then
				--print("RednetMsg")
				msg =param2
				if msg == "autominer:stopped" then
					while true do
						print("[c]ontinue | [s]top |[m]anual")
						ans = read()
						if ans == "c" then
						--	Continue
							rednet.send(minerid,"autominer:continue")	
							
							break
						elseif ans == "s" then
						--	Stop
							rednet.send(minerid,"autominer:stop")
							break
						elseif ans == "m" then
							
							rednet.send(minerid,"autominer:manual")
							continue = false
							sendOrder()
							break
						end
					end
					--	Back menu
					
				elseif msg == "autominer:done" then
					print("Autominer done.")
					continue = false
				else
					term.clear()
					cache = msg
					print(msg)
				end
			else
				print(cache)
			end
		end
	end
end
function requestKey()
	print("write q to stop: ")
	while true do
	local sEvent, param = os.pullEvent("key")
        if(sEvent == "key") then
            if(param == 16) then
				rednet.send(minerid,"autominer:stop")
				print("Quiere salir")
				continue = false
				break
			else
				
		
			end
			
		end
	end
end


function startAutominer()
		left = nil
		while left==nil do
			print("Especify the number of steps (1000): ")
			left = tonumber(io.read())
		end
		
		alg = nil
		algcode =''
		while alg~=1 or alg==nil do
			print("Especify the mining algorithm")
			print("1 - Mining shafts")
			alg = tonumber(io.read())
		end
		
		if alg == 1 then
			algcode="sha"
			
			size = nil
			while size==nil do
				print("Especify the size of the shafts:(1-50)")
				size = tonumber(io.read())
				if size <=0 and size >50 then
					size = nil
				end
			end
			sizestr=""
			if size <= 9 then
				sizestr= "0"..size
			else
				sizestr = size
			end
		end
		
		order = "auto"..algcode..sizestr..left
		print("Sending order key: " .. order)
		print("Time: ".. left)
		print("Alg: ".. algcode)
		print("Shaft size: ".. sizestr)
		-- autosha3312
		rednet.send(minerid,order)
		

		listenForAutominer()
end

function sendOrder()
		local cont = true
		while cont do
			write('Enter the order: ')
			order=io.read()
			if order == 'bcast' then
				while alg~=1 or alg==nil do
					print("1- Recall all lost bots")
					sel = tonumber(io.read())
				end
				if alg == 1 then
					rednet.broadcast("autominer:stop")
				end
			elseif order == "quit" then
				cont = false
				
			else 
				rednet.send(minerid,order)
				listen()
			end
		end
end




term.clear()
textutils.slowWrite("Welcome to Minermaster 1.3...")


connect()

while n ~= 4 do
	n=CUI(options)
	if n== 1 then
	--search miners
		searchMiners()
		
		print("Miner with id: "..minerid .. " found. Press ENTER key.")
		read()
	elseif n == 2 then
		if minerid ~= -1 then
				sendOrder()
		else
			print("You must search for miners first.Press ENTER key.")
			read()
		end
	elseif n == 3 then
		if minerid ~= -1 then
			startAutominer()
		else
			print("You must search for miners first. Press ENTER key.")
			read()
		end
	elseif n == 4 then
		print("Bye bye!!")
	end
	

end



--listen()
--while true do

	--sendOrder()
	--co =coroutine.create(sendOrder)
	--coroutine.resume(co)
	
--end



-- function listen()
	
	-- id,msg = rednet.receive()
	-- if id == minerid then
		

		-- if msg:sub(1,3)== "loc" then
			--: 4,4
			
			-- xaux=tonumber(msg:sub(5,6))
			--- 7,7
			-- yaux=tonumber(msg:sub(8,9))
			--- 10,10
			-- xant=tonumber(msg:sub(11,12))
			--- 13,13
			-- yant=tonumber(msg:sub(14,15))
			--- 16,16
			-- dir=tonumber(msg:sub(17,17))
			-- updateMatrix(xaux,yaux,xant,yant)
			-- char = dirToChar(dir)
			-- ScreenUpdate(xaux,yaux,char)
		-- elseif msg:sub(1,3)== "dir" then
				--: 4,4
			-- xaux=tonumber(msg:sub(5,6))
			--- 7,7
			-- yaux=tonumber(msg:sub(8,9))
			--- 10,10
			-- dir=tonumber(msg:sub(11,11))
			-- char = dirToChar(dir)
			-- print("vamos a usar: " .. char)
			-- ScreenUpdate(xaux,yaux,char)
		-- end
	-- end	
-- end